[  {    "name": "google/gson",    "description": "A Java serialization/deserialization library to convert Java Objects into JSON and back",    "creator": "google",    "license": {      "key": "apache-2.0",      "name": "Apache License 2.0",      "spdx_id": "Apache-2.0",      "url": "https://api.github.com/licenses/apache-2.0",      "node_id": "MDc6TGljZW5zZTI="    },    "readme": "# Gson\n\nGson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\nGson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n\nThere are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n\n### Goals\n  * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n  * Allow pre-existing unmodifiable objects to be converted to and from JSON\n  * Extensive support of Java Generics\n  * Allow custom representations for objects\n  * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n\n### Download\n\nGradle:\n```gradle\ndependencies {\n  implementation 'com.google.code.gson:gson:2.8.5'\n}\n```\n\nMaven:\n```xml\n<dependency>\n  <groupId>com.google.code.gson</groupId>\n  <artifactId>gson</artifactId>\n  <version>2.8.5</version>\n</dependency>\n```\n\n[Gson jar downloads](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) are available from Maven Central.\n\n[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n\n### Documentation\n  * [API Javadoc](http://www.javadoc.io/doc/com.google.code.gson/gson): Documentation for the current release\n  * [User guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n  * [Change log](https://github.com/google/gson/blob/master/CHANGELOG.md): Changes in the recent versions\n  * [Design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n\nPlease use the 'gson' tag on StackOverflow or the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n\n### Related Content Created by Third Parties\n  * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n  * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n  * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n\n### License\n\nGson is released under the [Apache 2.0 license](LICENSE).\n\n```\nCopyright 2008 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n### Disclaimer\n\nThis is not an officially supported Google product.\n"  },  {    "name": "codekidX/storage-chooser",    "description": "Lets user choose files in internal or external storage with just few lines of code.",    "creator": "codekidX",    "license": {      "key": "mpl-2.0",      "name": "Mozilla Public License 2.0",      "spdx_id": "MPL-2.0",      "url": "https://api.github.com/licenses/mpl-2.0",      "node_id": "MDc6TGljZW5zZTE0"    },    "readme": "Storage Chooser 2.0 ! - [Changes and Snippets](https://ashishshekar.com/projects/sc/)\n===================\n\n[![](https://jitpack.io/v/codekidX/storage-chooser.svg)](https://jitpack.io/#codekidX/storage-chooser)  [![](https://img.shields.io/badge/last--stable-da21db4-yellow.svg?style=flat-square)](https://github.com/codekidX/storage-chooser/commit/da21db4e5c46e0c3a8b513112ff093448a23754b)  ![GitHub issues](https://img.shields.io/github/issues/codekidX/storage-chooser.svg?style=flat-square)  [![demo](https://img.shields.io/badge/download-demo-blue.svg?style=flat-square)](https://raw.githubusercontent.com/android-arsenal/apk22/master/5336/app.apk)  [![javadoc](https://img.shields.io/badge/Jitpack-javadoc-blue.svg?style=flat-square)](https://jitpack.io/com/github/codekidX/storage-chooser/1.0.33/javadoc/)\n\n\nA pretty and simple directory chooser and file picker library for 4.4+ devices. This library was created to be included in [OpenGApps App](https://play.google.com/store/apps/details?id=org.opengapps.app). There are too many storage chooser out there but this one is too materially :stuck_out_tongue: . Easy to implement and does not take a lot of your valueable time in setting-up all the other necessary things that every developer seeks, like\n\n- saving path to sharedPreference\n- event when path is selected and act upon that path\n- and much more.\n\nThere are also some really nice features that I thought would come in handy:\n\n- You show a quick overview of the storages present and their memory available before choosing so that users know which storage to choose.\n- you can choose between _sheet and sleek_ layouts.\n- Inline create folder view _(not another dialog to handle)_\n- Full localization. I mean literally every strings can be localized to your desired language.\n- Memory thresholding - a restriction or a toast that it shows when user's memory is less than your defined memory for operations.\n- and more will be added soon.\n\n\n\nPreview\n-------\n\n![SC Features](http://i.imgur.com/nmqPJok.gif)\n\n\n\nInstallation\n------------\n\nAdd this to your root build.gradle file under repositories:\n\n    allprojects {\n\t\trepositories {\n\t\t\tmaven { url \"https://jitpack.io\" }\n\t\t}\n\t}\n\nAdd this to your app level build.gradle as dependency:\n\n    com.github.codekidX:storage-chooser:2.0.4.2\n\n\nNotes\n-----\n\nBefore you implement this library here are some notes that you can follow to avoid errors.\n\n> **Confirm:**\n\n> - You have asked for **Runtime Permission** from the user in the past to avoid read errors.\n> - Permissions with \"READ_EXTERNAL_STORAGE\" and \"WRITE_EXTERNAL_STORAGE\" is enough for this library to work.\n> - This library follows same color scheme as that of the parent app to maintain the aesthetic of the parent app. _See the color scheme section below_\n\n\nImplementation\n--------------\n\n\n## List of configuration for StorageChooser.Builder\n\nYou can have the following configuration of builder.\n\n| methods | parameters | compulsary? |\n| ------ | ------ | ------ |\n| withActivity | Activity  | Yes |\n| withFragmentManager | FragmentManager _(legacy)_ | Yes |\n| withMemoryBar | boolean | No |\n| hideFreeSpaceLabel | boolean | No |\n| withPreference | SharedPreferences | actionSave(true) |\n| withPredefinedPath | String | No |\n| **setType** | StoragChooser.DIRECTORY_CHOOSER **_or_** StorageChooser.FILE_PICKER| allowCustomPath(true) |\n| showHidden | boolean | No |\n| setTheme | StorageChooser.Theme | No |\n| skipOverview | boolean, String | No |\n| skipOverview | boolean | No |\n| withContent | com.codekidlabs.storagechooser.Content | No |\n| customFilter | ArrayList<String> | No |\n| filter | StorageChooser.FileType | No |\n| shouldResumeSession | boolean | No |\n| setHeadingTypeface | String, boolean | No |\n| setListTypeface | String, boolean | No |\n| disableMultiSelect | NONE | No |\n\n### Simple Type\n\n- Let's you toggle between inernal/external root directory.\n\n```\n// ~\n\n// Initialize Builder\nStorageChooser chooser = new StorageChooser.Builder()\n.withActivity(MainActivity.this)\n.withFragmentManager(getFragmentManager())\n.withMemoryBar(true)\n.build();\n\n// Show dialog whenever you want by\nchooser.show();\n\n// get path that the user has chosen\nchooser.setOnSelectListener(new StorageChooser.OnSelectListener() {\n    @Override\n    public void onSelect(String path) {\n        Log.e(\"SELECTED_PATH\", path);\n    }\n});\n```\n\n> OUTPUT: **/storage/emulated/0**\n\n### Pre-defined Type\n\n- Let's you append a specific path to the root of internal or external directory.\n\n```\n// --- ADD --\n.withPredefinedPath(STATIC_PATH)\n```\n\n> OUTPUT: **/storage/emulated/0/Downloads/CodekidLabs**\n\n### Custom Type\n\n- Let's your user choose custom directory/file.\n\n#### Directory Chooser\n\n```\n// --- ADD ---\n.allowCustomPath(true)\n.setType(StorageChooser.DIRECTORY_CHOOSER)\n```\n\n#### File Picker\n\n```\n// --- ADD ---\n.allowCustomPath(true)\n.setType(StorageChooser.FILE_PICKER)\n```\n\n### Save directly to preference\n\n```\n// --- ADD ---\n.actionSave(true)\n.withPreference(sharedPreferences)\n```\n\n### Get path from preference\n\n```\nString path = sharedPreferences.getString(DiskUtil.SC_PREFERENCE_KEY,\"\");\n```\n### (2.0) Theme\nA guide on how to set a theme is posted [here](https://github.com/codekidX/storage-chooser/wiki/A-Look-at-Storage-Chooser.Theme)\n### (2.0) File Filter\n\nFile filters are good and when your app is made for a specific purpose like choosing songs to be added in a playlist you might not want the user to go into the folders where there are no songs. Now you can add filter to builder instance like this\n`builder.filter(StorageChooser.FileType.AUDIO);`\nthis will filter out all folders containing audio files for you and thereby reducing some effort from user side.\n\nIn version *2.0.3*+, there is a support for custom file filters, all you need to do is create an `ArrayList<String>` of all the extensions without the `.` before it and send it to `builder.customFilter` function.\n\n| filter | extensions |\n| ------ | ------ |\n| StorageChooser.FileType.AUDIO | .mp3 .ogg |\n| StorageChooser.FileType.VIDEO | .mp4 .ts .mkv .avi .flv |\n| StorageChooser.FileType.IMAGES | .jpg .jpeg .png .gif .tiff |\n| StorageChooser.FileType.DOCS | .pdf .doc .docx .ppt .xls |\n\n### (2.0) Multiselect\n It's already in there you don't need to write any special code for it. Just make sure your type of chooser is of type FILE_PICKER.\n`builder.setType(StorageChooser.FILE_PICKER);`\n\n![](https://media.giphy.com/media/7AWKkgm9Nozw4/giphy.gif)\n\n## Localization\n\nA seperate localization wiki is posted [here](https://github.com/codekidX/storage-chooser/wiki/Localizing-your-chooser-using-Content)\n\nLICENSE\n-------\n\nThis project is licensed with the Mozilla Public License v2.\n\nIn practice, you can use this library as-is, with a notification of it being used. If you make any changes, you are required to publish your changes under a compatible license.\n\n\n### Support Storage Chooser\n\nThis is a community based project so help fixing bugs by adding your fixes to it by [Create pull request](https://github.com/codekidX/storage-chooser/pull/new/master)\n"  },  {    "name": "codekidX/meter",    "description": "WIP date library for android",    "creator": "codekidX",    "license": {      "key": "apache-2.0",      "name": "Apache License 2.0",      "spdx_id": "Apache-2.0",      "url": "https://api.github.com/licenses/apache-2.0",      "node_id": "MDc6TGljZW5zZTI="    },    "readme": ""  },  {    "name": "material-components/material-components-android",    "description": "Modular and customizable Material Design UI components for Android",    "creator": "material-components",    "license": {      "key": "apache-2.0",      "name": "Apache License 2.0",      "spdx_id": "Apache-2.0",      "url": "https://api.github.com/licenses/apache-2.0",      "node_id": "MDc6TGljZW5zZTI="    },    "readme": "[![Build Status](https://img.shields.io/travis/material-components/material-components-android/master.svg)](https://travis-ci.org/material-components/material-components-android/)\n[![Chat](https://img.shields.io/discord/259087343246508035.svg)](https://discord.gg/material-components)\n\n# Material Components for Android\n\nMaterial Components for Android (MDC-Android) help developers execute\n[Material Design](https://www.material.io). Developed by a core team of\nengineers and UX designers at Google, these components enable a reliable\ndevelopment workflow to build beautiful and functional Android apps.\n\nMaterial Components for Android is a drop-in replacement for Android's\nDesign Support Library.\n\n## Getting Started\n\nFor information on how to get started with Material Components for Android,\ntake a look at our [Getting Started](docs/getting-started.md) guide.\n\n## Submitting Bugs or Feature Requests\n\nFor usage questions: ask on\n[Stack  Overflow](http://stackoverflow.com/questions/tagged/material-components).\n\nBugs or feature requests should be submitted at https://issuetracker.google.com/issues/new?component=439535\n\n## Useful Links\n- [All Components](https://github.com/material-components/material-components-android/tree/master/lib/)\n- [Getting Started](docs/getting-started.md)\n- [Contributing](docs/contributing.md)\n- [Building From Source](docs/building-from-source.md)\n- [Catalog App](docs/catalog-app.md)\n- [Class\n  documentation](https://developer.android.com/reference/com/google/android/material/classes)\n  (external site)\n- [MDC-Android on Stack\n  Overflow](https://www.stackoverflow.com/questions/tagged/material-components+android)\n  (external site)\n- [Android Developer’s\n  Guide](https://developer.android.com/training/material/index.html)\n  (external site)\n- [Material.io](https://www.material.io) (external site)\n- [Material Design Guidelines](https://material.google.com) (external site)\n\n## Documentation\n\n*   [Directory structure](docs/directorystructure.md)\n*   [Components](docs/components/)\n"  }]